priority -40

global !p
import sniphpets

def resolve_label(name):
	return sniphpets.ucfirst(sniphpets.camel_to_snake(name, ' '))
endglobal

snippet sfformtype "Symfony / Form / Form type" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class `!v sniphpets#basename()` extends AbstractType
{
	public function buildForm(FormBuilderInterface \$builder, array \$options)
	{
		\$builder
			->add(${0}
		;
	}

	public function configureOptions(OptionsResolver \$resolver)
	{
		\$resolver->setDefaults([
			'data_class' => ${1:'`!v sniphpets#symfony#resolve_bundle_namespace()`\Entity\\`!v sniphpets#basename('Type')`'},
		]);
	}
}
endsnippet

snippet sfformtype2 "Symfony / Form / Form type (Symfony 2)" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;

class `!v sniphpets#basename()` extends AbstractType
{
	public function buildForm(FormBuilderInterface \$builder, array \$options)
	{
		\$builder
			->add(${0}
		;
	}

	public function configureOptions(OptionsResolverInterface \$resolver)
	{
		\$resolver->setDefaults([
			'data_class' => ${1:'`!v sniphpets#symfony#resolve_bundle_namespace()`\Entity\\`!v sniphpets#basename('Type')`'},
		]);
	}

	public function getName()
	{
		return '${2:`!v sniphpets#camel_to_snake(sniphpets#symfony#resolve_bundle_name() . sniphpets#basename('Type'))`}';
	}
}
endsnippet

snippet sfformtypeextension "Symfony / Form / Form type extension" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Symfony\Component\Form\AbstractTypeExtension;

class `!v sniphpets#basename()` extends AbstractTypeExtension
{
	public function getExtendedType()
	{
		return '${1:form}';
	}
}
endsnippet

snippet sfformbuildform "Symfony / Form / buildForm method" b
public function buildForm(FormBuilderInterface \$builder, array \$options)
{
	\$builder
		->add(${0})
	;
}
endsnippet

snippet sfformconfigureoptions "Symfony / Form / configureOptions method" b
public function configureOptions(OptionsResolverInterface \$resolver)
{
	\$resolver->${1:setDefaults}([
		${0}
	]);
}
endsnippet

snippet sfformbuildview "Symfony / Form / buildView method" b
public function buildView(FormView \$view, FormInterface \$form, array \$options)
{
	${0}
}
endsnippet

snippet sfformfinishview "Symfony / Form / finishView method" b
public function finishView(FormView \$view, FormInterface \$form, array \$options)
{
	${0}
}
endsnippet

snippet sfformuse "Symfony / Form / Use type" b
use Symfony\Component\Form\Extension\Core\Type\\${1:Text}Type;
endsnippet

snippet sfformadd "Symfony / Form / Add field" b
->add('${1:name}', ${2:Text}Type::class, [
	'label' => '${3:`!p snip.rv = resolve_label(t[1])`}',${0}
])
endsnippet

snippet sfformaddentity "Symfony / Form / Add entity field" b
->add('${1:name}', EntityType::class, [
	'label' => '${2:`!p snip.rv = resolve_label(t[1])`}',
	'class' => ${3:`!p snip.rv = sniphpets.ucfirst(t[1])`}::class,
	'choice_label' => '${4}',${0}
])
endsnippet

snippet sfformdatatransformer "Symfony / Form / Data transformer" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Symfony\Component\Form\DataTransformerInterface;
use Symfony\Component\Form\Exception\UnexpectedTypeException;
use Symfony\Component\Form\Exception\TransformationFailedException;

class `!v sniphpets#basename()` implements DataTransformerInterface
{
	public function transform(\$value)
	{
		${0}
	}

	public function reverseTransform(\$value)
	{
	}
}
endsnippet

snippet sfformdatamapper "Symfony / Form / Data mapper" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Symfony\Component\Form\DataMapperInterface;

class `!v sniphpets#basename()` implements DataMapperInterface
{
	public function mapDataToForms(\$data, \$forms)
	{
		${0}
	}

	public function mapFormsToData(\$forms, &\$data)
	{
	}
}
endsnippet

snippet sfformextension "Symfony / Form / Extension" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Symfony\Component\Form\AbstractExtension;

class `!v sniphpets#basename()` extends AbstractExtension
{
	protected function loadTypes()
	{
		return [${0}];
	}

	protected function loadTypeExtensions()
	{
		return [];
	}

	protected function loadTypeGuesser()
	{
	}
}
endsnippet

snippet sfformhandle "Symfony / Form / Handle" b
\$${1:form}->handleRequest(\$${2:request});

if (\$$1->isSubmitted() && \$$1->isValid()) {
	${0}
}
endsnippet
