priority -40

global !p
import sniphpets

def resolve_label(name):
	return sniphpets.ucfirst(sniphpets.camel_to_snake(name, ' '))
endglobal

snippet sfform "Symfony / Form / Form type" b
<?php

namespace App\Form;

use App\Entity\\`!v sniphpets#basename('Type')`;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class `!v sniphpets#basename()` extends AbstractType
{
	public function buildForm(FormBuilderInterface \$builder, array \$options)
	{
		\$builder
			->add(${0}
		;
	}

	public function configureOptions(OptionsResolver \$resolver)
	{
		\$resolver->setDefaults([
			'data_class' => `!v sniphpets#basename('Type')`::class,
		]);
	}
}
endsnippet

snippet sfformadd "Symfony / Form / Add field" b
->add('${1:name}', ${2:Text}Type::class, [
	'label' => '${3:`!p snip.rv = resolve_label(t[1])`}',${0}
])
endsnippet

snippet sfformaddcollection "Symfony / Form / Add collection field" b
->add('${1:name}', CollectionType::class, [
	'label' => '${2:`!p snip.rv = resolve_label(t[1])`}',
	'entry_type' => ${3:`!p snip.rv = sniphpets.ucfirst(t[1])`}Type::class,
])
endsnippet

snippet sfformaddchoice "Symfony / Form / Add choice field" b
->add('${1:name}', ChoiceType::class, [
	'label' => '${2:`!p snip.rv = resolve_label(t[1])`}',
	'choices' => [
		${0}
	],
])
endsnippet

snippet sfformaddrange "Symfony / Form / Add range field" b
->add('${1:name}', RangeType::class, [
	'label' => '${2:`!p snip.rv = resolve_label(t[1])`}',
	'attr' => [
		'min' => ${3:1},
		'max' => ${4:10},
	],
])
endsnippet

snippet sfformaddentity "Symfony / Form / Add entity field" b
->add('${1:name}', EntityType::class, [
	'label' => '${2:`!p snip.rv = resolve_label(t[1])`}',
	'class' => ${3:`!p snip.rv = sniphpets.ucfirst(t[1])`}::class,
	'choice_label' => '${4}',${0}
])
endsnippet

snippet sfformuse "Symfony / Form / Use type" b
use Symfony\Component\Form\Extension\Core\Type\\${1:Text}Type;
endsnippet

snippet sfformhandle "Symfony / Form / Handle request" b
\$${1:form}->handleRequest(\$${2:request});

if (\$$1->isSubmitted() && \$$1->isValid()) {
	${0}
}
endsnippet
