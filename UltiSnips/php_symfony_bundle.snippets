priority -40

snippet sfbundle "Symfony / Bundle / Bundle class" b
<?php

namespace `!v sniphpets#namespace()`;

use Symfony\Component\HttpKernel\Bundle\Bundle;

class `!v sniphpets#basename()` extends Bundle
{
}
endsnippet

snippet sfbundleextensiony "Symfony / Bundle / Extension class (YAML)" b
<?php

namespace `!v sniphpets#namespace()`;

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;
use Symfony\Component\HttpKernel\DependencyInjection\Extension;

class `!v sniphpets#basename()` extends Extension
{
	public function load(array \$configs, ContainerBuilder \$container)
	{
		\$configuration = new Configuration();
		\$config = \$this->processConfiguration(\$configuration, \$configs);
		${0}
		\$loader = new YamlFileLoader(\$container, new FileLocator(__DIR__.'/../Resources/config'));

		\$loader->load('services.yml');
	}
}
endsnippet

snippet sfbundleextensionx "Symfony / Bundle / Extension class (XML)" b
<?php

namespace `!v sniphpets#namespace()`;

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;
use Symfony\Component\HttpKernel\DependencyInjection\Extension;

class `!v sniphpets#basename()` extends Extension
{
	public function load(array \$configs, ContainerBuilder \$container)
	{
		\$configuration = new Configuration();
		\$config = \$this->processConfiguration(\$configuration, \$configs);
		${0}
		\$loader = new XmlFileLoader(\$container, new FileLocator(__DIR__.'/../Resources/config'));

		\$loader->load('services.xml');
	}
}
endsnippet

snippet sfbundleconfig "Symfony / Bundle / Config class" b
<?php

namespace `!v sniphpets#namespace()`;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class `!v sniphpets#basename()` implements ConfigurationInterface
{
	public function getConfigTreeBuilder()
	{
		\$treeBuilder = new TreeBuilder();
		\$rootNode = \$treeBuilder->root('${1:`!v sniphpets#camel_to_snake(sniphpets#symfony#resolve_bundle_name())`}');
		${0}
		return \$treeBuilder;
	}
}
endsnippet
