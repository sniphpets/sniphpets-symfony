priority -40

snippet sfassert "Symfony / Validator / #[Assert]" b
#[Assert\\${1:NotBlank}]
endsnippet

snippet sfconstraint "Symfony / Validator / Regular constraint class" b
<?php`!v sniphpets#header()`

namespace `!v sniphpets#namespace()`;

use Symfony\Component\Validator\Constraint;

#[\Attribute]
class `!v sniphpets#basename()` extends Constraint
{
	public \$message = '${0}';
}
endsnippet

snippet sfconstraint "Symfony / Validator / Compound constraint class" b
<?php`!v sniphpets#header()`

namespace `!v sniphpets#namespace()`;

use Symfony\Component\Validator\Constraints\Compound;
use Symfony\Component\Validator\Constraints as Assert;

#[\Attribute]
class `!v sniphpets#basename()` extends Compound
{
	protected function getConstraints(array $options): array
	{
		return [
			${0}
		];
	}
}
endsnippet

snippet sfvalidator "Symfony / Validator / Validator class" b
<?php`!v sniphpets#header()`

namespace `!v sniphpets#namespace()`;

use Symfony\Component\Validator\Constraint;
use Symfony\Component\Validator\ConstraintValidator;
use Symfony\Component\Validator\Exception\UnexpectedTypeException;

class `!v sniphpets#basename()` extends ConstraintValidator
{
	public function validate(\$value, Constraint \$constraint): void
	{
		if (!\$constraint instanceof `!v sniphpets#basename('Validator')`) {
			throw new UnexpectedTypeException(\$constraint, `!v sniphpets#basename('Validator')`::class);
		}

		if (null === \$value || '' === \$value) {
			return;
		}

		${VISUAL}${0}
	}
}
endsnippet
